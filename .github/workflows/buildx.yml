name: Build and push a Docker image

# This workflow uses workload identity federation, and requires that the
# appropriate policy binding has been set up for the calling repository. See if
# it has with:
#
#     gcloud iam service-accounts get-iam-policy builder@replicate-production.iam.gserviceaccount.com
#
# Note that the calling workflow will also need to specify the
# appropriate permissions on the job that uses this workflow, e.g.
#
#     build:
#       permissions:
#         contents: 'read'
#         id-token: 'write'
#       uses: replicate/workflows/.github/workflows/buildx.yml@main
#       with:
#         image: cluster

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
        description: The name of the image to push.
      context:
        required: false
        type: string
        default: "{{defaultContext}}"
        description: The context argument to pass to docker/build-push-action.
      platforms:
        required: false
        type: string
        default: linux/amd64,linux/arm64
        description: The platforms to build the docker image against.
      build-args:
        required: false
        type: string
        default: ''
        description: Additional build-args argument passed to docker/build-push-action.
      fetch-depth:
        required: false
        type: number
        default: 1
        description: The fetch depth passed to actions/checkout.
      file:
        required: false
        type: string
        default: ''
        description: Path to the Dockerfile passed to docker/build-push-action.
      enable-go-build-cache:
        required: false
        type: boolean
        default: false
        description: Whether to add a GitHub Actions cache instance at /root/.cache/go-build
    outputs:
      image:
        description: "The built image identifier"
        value: ${{ jobs.build.outputs.image }}

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest-8-cores

    if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:
      image: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}:${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Authenticate to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::851725545228:role/GitHubBuilder
        aws-region: us-east-1
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851725545228.dkr.ecr.us-east-1.amazonaws.com
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 851725545228.dkr.ecr.us-west-2.amazonaws.com
    - name: 'Set Docker metadata'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          us-docker.pkg.dev/replicate-production/replicate-services-us/${{ inputs.image }}
          851725545228.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.image }}
          851725545228.dkr.ecr.us-west-2.amazonaws.com/${{ inputs.image }}
        tags: |
          type=sha
          type=raw,value=latest,enable={{is_default_branch}},priority=0
        labels: |
          org.opencontainers.image.title=${{ inputs.image }}

    - name: 'Set up Buildx'
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - id: auth
      name: 'Authenticate to Google Cloud'
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/1025538909507/locations/global/workloadIdentityPools/github/providers/github-actions'
        service_account: 'builder@replicate-production.iam.gserviceaccount.com'
        token_format: 'access_token'

    - name: 'Log into US Artifact Registry'
      uses: docker/login-action@v3
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: '${{ steps.auth.outputs.access_token }}'

    - name: "Create go build cache"
      uses: actions/cache@v3
      id: go-build-cache
      if: ${{ inputs.enable-go-build-cache }}
      with:
        path: |
          go-build-cache
          go-mod-cache
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: 'Inject go build cache into docker'
      uses: reproducible-containers/buildkit-cache-dance@v3.1.2
      if: ${{ inputs.enable-go-build-cache }}
      with:
        cache-map: |
          {
            "go-build-cache": "/root/.cache/go-build",
            "go-mod": "/root/go/pkg/mod"
          }
        # Only save the cache from the main branch. Not worth saving build cache from PR builds.
        skip-extraction: |
          ${{ steps.go-build-cache.outputs.cache-hit || github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
    - name: 'Build and push'
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file || '' }}
        push: true
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ inputs.image }}
        cache-to: type=gha,scope=${{ inputs.image }},mode=max
        build-args: |
          COMMIT_SHA=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          ${{ inputs.build-args }}
